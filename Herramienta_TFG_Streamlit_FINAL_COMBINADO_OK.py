# ==========================================
# Interface Header (added automatically)
# ==========================================
import streamlit as st
from datetime import datetime

st.set_page_config(page_title="Herramienta de IA - Planificaci√≥n Estrat√©gica", layout="centered")

st.title("üß† Herramienta de IA para la Planificaci√≥n Estrat√©gica de la Plantilla")
st.markdown(
    """
    **Aplicaci√≥n desarrollada por *Antonio Wilkinson* como parte de su Trabajo de Fin de Grado (TFG)**  
    Fecha: 24-06-2025

    ---
    **¬øQu√© hace esta herramienta?**  
    - Predice el riesgo de abandono de cada empleado.  
    - Agrupa perfiles mediante PCA y *clustering*.  
    - Simula pol√≠ticas estrat√©gicas (formaci√≥n, salario y combinadas).  
    - Analiza el clima laboral por departamento.  

    Al finalizar, podr√°s descargar:  
    - Un **informe completo (.txt)** con explicaciones detalladas.  
    - Un **informe gr√°fico (.pdf)** con las visualizaciones clave.
    """
)

st.markdown("---")


# üìÅ Carga de datos
try:
    uploaded = files.upload()
    df = pd.read_csv(next(iter(uploaded)), sep=None, engine='python')
    print("‚úÖ Archivo cargado correctamente.")
except:
    print("‚ö†Ô∏è No se subi√≥ archivo. Usando datos de ejemplo.")
    df = pd.read_csv('/mnt/data/datos_empleados_avanzado.csv', sep=';')

# üì¶ Librer√≠as necesarias
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score
from sklearn.cluster import KMeans
from IPython.display import HTML
from google.colab import files

# üîÑ Preprocesamiento de datos
df_encoded = pd.get_dummies(df, columns=["Departamento", "Tipo_Contrato"], drop_first=True)
X = df_encoded.drop("Riesgo_Abandono", axis=1)
y = df_encoded["Riesgo_Abandono"]
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.3, random_state=42)

# ü§ñ Entrenamiento del modelo
model = LogisticRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
y_prob = model.predict_proba(X_test)[:,1]
print(classification_report(y_test, y_pred))
print("ROC AUC:", roc_auc_score(y_test, y_prob))

import os
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.decomposition import PCA

# Crear carpeta de im√°genes si no existe
os.makedirs("temp_img", exist_ok=True)

# --- Gr√°fica 1: Distribuci√≥n del Riesgo de Abandono ---
plt.figure(figsize=(7,5))
sns.histplot(df_sim['Prob_Abandono'], bins=20, kde=True)
plt.title("Distribuci√≥n del riesgo de abandono")
plt.xlabel("Probabilidad de abandono")
plt.ylabel("N√∫mero de empleados")
plt.tight_layout()
plt.savefig("temp_img/graf_riesgo.png")
plt.close()

# --- Gr√°fica 2: Clima Laboral por Departamento ---
if 'Clima_Laboral' in df_sim.columns:
    plt.figure(figsize=(8,5))
    df_sim.groupby("Departamento")["Clima_Laboral"].mean().plot(kind="bar")
    plt.title("Clima laboral medio por departamento")
    plt.ylabel("Puntuaci√≥n media")
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.savefig("temp_img/graf_clima.png")
    plt.close()

# --- Gr√°fica 3: Comparativa de Pol√≠ticas Estrat√©gicas ---
if 'escenarios' in globals() and isinstance(escenarios, dict) and escenarios:
    plt.figure(figsize=(6,4))
    sns.barplot(x=list(escenarios.keys()), y=list(escenarios.values()), palette="Set2")
    plt.title("Comparativa de Pol√≠ticas Estrat√©gicas")
    plt.ylabel("Riesgo medio estimado")
    plt.tight_layout()
    plt.savefig("temp_img/graf_politicas.png")
    plt.close()

# --- Gr√°fica 4: Promedio de Abandono por Departamento ---
if 'Departamento' in df_sim.columns:
    plt.figure(figsize=(8,5))
    df_sim.groupby("Departamento")["Prob_Abandono"].mean().plot(kind="bar", color="salmon")
    plt.title("Promedio de Abandono por Departamento")
    plt.ylabel("Riesgo medio")
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.savefig("temp_img/graf_abandono_departamento.png")
    plt.close()

# --- Gr√°fica 5: Visualizaci√≥n de Perfiles (PCA + Clustering) ---
try:
    clustering_features = ["Edad", "Antig√ºedad", "Clima_Laboral", "Desempe√±o", "Prob_Abandono"]
    df_cluster = df_sim[clustering_features].dropna()

    pca = PCA(n_components=2)
    pca_result = pca.fit_transform(df_cluster)

    df_cluster["PCA1"] = pca_result[:, 0]
    df_cluster["PCA2"] = pca_result[:, 1]
    df_cluster["Cluster"] = df_sim["Perfil_Empleado"]

    plt.figure(figsize=(8,6))
    sns.scatterplot(data=df_cluster, x="PCA1", y="PCA2", hue="Cluster", palette="tab10")
    plt.title("Visualizaci√≥n de Perfiles de Empleados (PCA + Clustering)")
    plt.tight_layout()
    plt.savefig("temp_img/clustering_pca.png")
    plt.close()
except Exception as e:
    print("Error al generar la gr√°fica de PCA:", e)

# üìÑ Generar informe PDF para descargar
from fpdf import FPDF
from google.colab import files
import os
import shutil
from datetime import datetime
import matplotlib.pyplot as plt
import seaborn as sns
import re # Importar la librer√≠a re para expresiones regulares

class PDFReport(FPDF):
    def header(self):
        self.set_font("Arial", "B", 14)
        self.cell(0, 10, "Informe Estrat√©gico de Plantilla - IA RRHH", ln=True, align="C")
        self.set_font("Arial", "", 10)
        self.cell(0, 10, "Generado autom√°ticamente a partir del an√°lisis de empleados", ln=True, align="C")
        self.ln(5)

    def add_employee_section(self, row):
        self.set_font("Arial", "B", 11)
        self.cell(0, 10, f"Departamento: {row['Departamento']}", ln=True)
        self.set_font("Arial", "", 10)

        # Eliminar emojis de la recomendaci√≥n usando una expresi√≥n regular
        # Esto asegura que solo se incluyan caracteres que fpdf pueda manejar.
        recommendation_text = row.get('Recomendaci√≥n', 'No disponible')
        recommendation_text = re.sub(r'[^\x00-\x7F]+', '', recommendation_text) # Elimina caracteres no ASCII

        self.multi_cell(0, 8, f"""Edad: {row['Edad']} a√±os
Antig√ºedad: {row['Antig√ºedad']} a√±os
Desempe√±o: {row['Desempe√±o']} / 5
Clima Laboral: {row['Clima_Laboral']} / 5
Horas Extra: {row['Horas_Extra']}h
Tipo de Contrato: {row['Tipo_Contrato']}
Bajas √öltimo A√±o: {row['Bajas_√öltimo_A√±o']}
Promociones en 2 A√±os: {row['Promociones_2_A√±os']}
Probabilidad de Abandono: {round(row['Prob_Abandono']*100)}%
Recomendaci√≥n: {recommendation_text}
""")
        self.ln(3)

# Crear y guardar PDF
pdf = PDFReport()
pdf.set_auto_page_break(auto=True, margin=15)
pdf.add_page()

# Assuming df_sim and other variables like escenarios are defined from previous cells
# If scenarios is not defined, you might need to define a dummy or calculate it
# for the "Simulaci√≥n de Pol√≠ticas" section to avoid errors there.
if 'escenarios' not in globals():
    # Define a placeholder if scenarios wasn't calculated earlier
    escenarios = {
        'Original': df["Riesgo_Abandono"].mean() if 'df' in globals() and 'Riesgo_Abandono' in df.columns else 0,
        'Simulaci√≥n Combinada': df_sim["Prob_Abandono"].mean() if 'df_sim' in globals() and 'Prob_Abandono' in df_sim.columns else 0
    }


# --- PORTADA ---
pdf.set_font("Arial", 'B', 16)
pdf.cell(0, 10, "Informe de An√°lisis Estrat√©gico y de Plantilla", ln=True)
pdf.set_font("Arial", size=12)
pdf.multi_cell(0, 10, f"""
Este informe ha sido generado mediante Inteligencia Artificial aplicada a Recursos Humanos.
Contiene un an√°lisis detallado del riesgo de abandono, clima laboral, simulaci√≥n de pol√≠ticas
estrat√©gicas y agrupaci√≥n de perfiles mediante clustering.

Fecha: {datetime.today().strftime('%d/%m/%Y')}
""")

# 3. Crear carpeta temporal para guardar im√°genes
os.makedirs("temp_img", exist_ok=True)

# --- SECCI√ìN 1: Riesgo de Abandono ---
pdf.add_page() # Start new section on a new page for clarity
pdf.set_font("Arial", 'B', 14)
pdf.cell(0, 10, "1. Riesgo de Abandono", ln=True)
pdf.set_font("Arial", size=12)
pdf.multi_cell(0, 10, """
Se ha estimado la probabilidad de abandono utilizando un modelo de aprendizaje autom√°tico basado
en caracter√≠sticas como edad, antig√ºedad, satisfacci√≥n y departamento.

A continuaci√≥n se muestran los 10 empleados con mayor riesgo estimado y las recomendaciones asociadas.
""")

# Tabla de empleados con mayor riesgo
top_empleados = df_sim.sort_values("Prob_Abandono", ascending=False).head(10)

for i, row in top_empleados.iterrows():
    pdf.set_font("Arial", 'B', 12)
    pdf.cell(0, 10, f"Empleado {i+1}", ln=True)
    pdf.set_font("Arial", size=12)

    # Clean recommendation text for top employees table as well
    recommendation_text_top = row.get('Recomendaci√≥n', 'No disponible')
    recommendation_text_top = re.sub(r'[^\x00-\x7F]+', '', recommendation_text_top) # Elimina caracteres no ASCII


    pdf.multi_cell(0, 10, f"""
Edad: {row['Edad']} | Antig√ºedad: {row['Antig√ºedad']} a√±os | Departamento: {row['Departamento']}
Clima Laboral: {row['Clima_Laboral']} / 5 | Riesgo estimado: {row['Prob_Abandono']:.2f}
Recomendaci√≥n: {recommendation_text_top}
""")

# Gr√°fica de distribuci√≥n de riesgo
plt.figure(figsize=(7,5))
sns.histplot(df_sim['Prob_Abandono'], bins=20, kde=True)
plt.title("Distribuci√≥n del riesgo de abandono")
plt.xlabel("Probabilidad de abandono")
plt.ylabel("N√∫mero de empleados")
plt.tight_layout()
riesgo_path = "temp_img/riesgo.png"
plt.savefig(riesgo_path)
plt.close()
pdf.add_page() # New page for the graph and its explanation
pdf.set_font("Arial", 'B', 12)
pdf.cell(0, 10, "Gr√°fica: Distribuci√≥n del riesgo", ln=True)
pdf.image(riesgo_path, w=180)
pdf.set_font("Arial", size=12)
pdf.multi_cell(0, 10, """
Esta gr√°fica muestra la distribuci√≥n de la probabilidad de abandono entre todos los empleados.
El eje X representa la probabilidad (de 0 a 1) y el eje Y indica cu√°ntos empleados tienen esa probabilidad.
Un pico alto cerca de 0.8 indica muchos empleados con alto riesgo, lo que es preocupante.
""")

# --- SECCI√ìN 2: Clima Laboral ---
pdf.add_page() # New section on a new page
pdf.set_font("Arial", 'B', 14)
pdf.cell(0, 10, "2. Clima Laboral Global", ln=True)
pdf.set_font("Arial", size=12)
pdf.multi_cell(0, 10, """
Se analiza la media de satisfacci√≥n, motivaci√≥n y equilibrio vida-trabajo por departamento.
""")

if 'Clima_Laboral' in df_sim.columns:
    plt.figure(figsize=(8,5))
    df_sim.groupby("Departamento")["Clima_Laboral"].mean().plot(kind="bar")
    plt.title("Clima laboral medio por departamento")
    plt.ylabel("Puntuaci√≥n media")
    plt.xticks(rotation=45)
    plt.tight_layout()
    clima_path = "temp_img/clima.png"
    plt.savefig(clima_path)
    plt.close()
    pdf.image(clima_path, w=180)
    pdf.multi_cell(0, 10, """
    Esta gr√°fica muestra la media de la puntuaci√≥n de Clima Laboral por departamento.
    Eje X: departamentos. Eje Y: puntuaci√≥n media de Clima Laboral (de 0 a 5, basado en sus datos).
    Permite identificar √°reas con problemas o fortalezas en el ambiente de trabajo.
    """)
else:
    pdf.multi_cell(0, 10, "Datos de Clima Laboral detallado no disponibles en el dataset.")


# --- SECCI√ìN 3: Simulaci√≥n de Medidas Estrat√©gicas ---
pdf.add_page() # New section on a new page
pdf.set_font("Arial", 'B', 14)
pdf.cell(0, 10, "3. Simulaci√≥n de Pol√≠ticas", ln=True)
pdf.set_font("Arial", size=12)
pdf.multi_cell(0, 10, """
Se comparan tres escenarios: mejora de formaci√≥n, mejora salarial, y combinaci√≥n de ambas.
El objetivo es ver su impacto en la probabilidad media de abandono.
""")

if 'escenarios' in globals() and isinstance(escenarios, dict) and escenarios:
    plt.figure(figsize=(6,4))
    sns.barplot(x=list(escenarios.keys()), y=list(escenarios.values()))
    plt.title("Comparativa de pol√≠ticas estrat√©gicas")
    plt.ylabel("Probabilidad media de abandono")
    plt.tight_layout()
    sim_path = "temp_img/simulacion.png"
    plt.savefig(sim_path)
    plt.close()
    pdf.image(sim_path, w=160)
    pdf.multi_cell(0, 10, """
    Esta gr√°fica muestra la efectividad de distintas pol√≠ticas para reducir el riesgo global.
    Eje X: tipo de pol√≠tica aplicada. Eje Y: riesgo medio resultante.
    La pol√≠tica m√°s baja indica la estrategia m√°s efectiva.
    """)
else:
     pdf.multi_cell(0, 10, "Resultados de simulaci√≥n de pol√≠ticas no disponibles.")


# --- SECCI√ìN 4: Clustering de Perfiles ---
pdf.add_page() # New section on a new page
pdf.set_font("Arial", 'B', 14)
pdf.cell(0, 10, "4. Agrupaci√≥n de Perfiles (Clustering)", ln=True)
pdf.set_font("Arial", size=12)
pdf.multi_cell(0, 10, """
Se han agrupado empleados con caracter√≠sticas similares para facilitar la toma de decisiones adaptadas.
""")

if 'Perfil_Empleado' in df_sim.columns:
    for c in sorted(df_sim["Perfil_Empleado"].unique()):
        grupo = df_sim[df_sim["Perfil_Empleado"] == c]
        pdf.set_font("Arial", 'B', 12)
        pdf.cell(0, 10, f"Grupo: {c} - {len(grupo)} empleados", ln=True)
        pdf.set_font("Arial", size=12)

        # Include metrics that are available in df_sim
        edad_media = grupo['Edad'].mean() if 'Edad' in grupo.columns else 'N/A'
        antiguedad_media = grupo['Antig√ºedad'].mean() if 'Antig√ºedad' in grupo.columns else 'N/A'
        clima_medio = grupo['Clima_Laboral'].mean() if 'Clima_Laboral' in grupo.columns else 'N/A'
        prob_abandono_media = grupo['Prob_Abandono'].mean() if 'Prob_Abandono' in grupo.columns else 'N/A'
        recomendacion_principal = grupo['Recomendaci√≥n'].mode().values[0] if 'Recomendaci√≥n' in grupo.columns and not grupo['Recomendaci√≥n'].mode().empty else 'No disponible'

        # Clean recommendation text for cluster summary as well
        recommendation_principal_cleaned = re.sub(r'[^\x00-\x7F]+', '', str(recomendacion_principal))


        pdf.multi_cell(0, 10, f"""
    Edad media: {edad_media:.1f} | Antig√ºedad media: {antiguedad_media:.1f}
    Clima Laboral medio: {clima_medio:.1f}
    Probabilidad de Abandono media: {prob_abandono_media:.2f}
    Recomendaci√≥n principal: {recommendation_principal_cleaned}
    """)
else:
     pdf.multi_cell(0, 10, "Datos de Clustering de perfiles no disponibles.")


# --- SECCI√ìN 5: Contenido del Informe Estrat√©gico (Integrado) ---
pdf.add_page() # New section on a new page
pdf.set_font("Arial", 'B', 14)
pdf.cell(0, 10, "5. Estrategia General y Conclusiones", ln=True)
pdf.set_font("Arial", size=12)
pdf.multi_cell(0, 10, """
A partir del an√°lisis anterior, se extraen conclusiones clave:

- Identificar y retener talento joven con alto potencial y riesgo de fuga.
- Fomentar la formaci√≥n en √°reas con baja motivaci√≥n.
- Usar la segmentaci√≥n por cl√∫ster para implementar medidas personalizadas.
- Promover entrevistas de seguimiento y bienestar en departamentos con bajo clima.
- Repetir este an√°lisis peri√≥dicamente y comparar la evoluci√≥n.

Este informe unifica datos y estrategias para apoyar una planificaci√≥n de RRHH basada en evidencias.
""")


# Add section for individual employee details with recommendations
pdf.add_page() # New section on a new page
pdf.set_font("Arial", 'B', 14)
pdf.cell(0, 10, "6. Detalles por Empleado y Recomendaciones", ln=True)
pdf.set_font("Arial", size=12)
pdf.multi_cell(0, 10, """
Aqu√≠ se presenta un listado con el riesgo de abandono estimado y la recomendaci√≥n
espec√≠fica generada para cada empleado.
""")

# Iterate through all employees in df_sim to add their individual details
for _, row in df_sim.iterrows():
    # Ensure enough space for the next employee's section, start a new page if needed
    if pdf.get_y() + 40 > pdf.h - pdf.b_margin: # Check if remaining space is less than estimated section height
        pdf.add_page()

    pdf.add_employee_section(row)


# --- EXPORTACI√ìN FINAL ---
pdf_path_final = "Informe_IA_RRHH_COMPLETO_FINAL.pdf"
pdf.output(pdf_path_final)
files.download(pdf_path_final)

# Clean up temporary images
if os.path.exists("temp_img"):
    shutil.rmtree("temp_img")

from fpdf import FPDF
import matplotlib.pyplot as plt
import seaborn as sns
import os
from google.colab import files

# Crear carpeta de im√°genes si no existe
os.makedirs("temp_img", exist_ok=True)

# --- Gr√°fica 1: Distribuci√≥n del Riesgo de Abandono ---
plt.figure(figsize=(7,5))
sns.histplot(df_sim['Prob_Abandono'], bins=20, kde=True)
plt.title("Distribuci√≥n del riesgo de abandono")
plt.xlabel("Probabilidad de abandono")
plt.ylabel("N√∫mero de empleados")
plt.tight_layout()
plt.savefig("temp_img/graf_riesgo.png")
plt.close()

# --- Gr√°fica 2: Clima Laboral por Departamento ---
if 'Clima_Laboral' in df_sim.columns:
    plt.figure(figsize=(8,5))
    df_sim.groupby("Departamento")["Clima_Laboral"].mean().plot(kind="bar")
    plt.title("Clima laboral medio por departamento")
    plt.ylabel("Puntuaci√≥n media")
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.savefig("temp_img/graf_clima.png")
    plt.close()

# --- Gr√°fica 3: Comparativa de Pol√≠ticas Estrat√©gicas ---
if 'escenarios' in globals() and isinstance(escenarios, dict) and escenarios:
    plt.figure(figsize=(6,4))
    sns.barplot(x=list(escenarios.keys()), y=list(escenarios.values()), palette="Set2")
    plt.title("Comparativa de Pol√≠ticas Estrat√©gicas")
    plt.ylabel("Riesgo medio estimado")
    plt.tight_layout()
    plt.savefig("temp_img/graf_politicas.png")
    plt.close()

# --- Gr√°fica 4: Promedio de Abandono por Departamento ---
if 'Departamento' in df_sim.columns:
    plt.figure(figsize=(8,5))
    df_sim.groupby("Departamento")["Prob_Abandono"].mean().plot(kind="bar", color="salmon")
    plt.title("Promedio de Abandono por Departamento")
    plt.ylabel("Riesgo medio")
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.savefig("temp_img/graf_abandono_departamento.png")
    plt.close()

# --- Gr√°fica 5: Visualizaci√≥n de Perfiles (PCA + Clustering) ---
if not os.path.exists("temp_img/clustering_pca.png"):
    try:
        from sklearn.decomposition import PCA
        import numpy as np

        clustering_features = ["Edad", "Antig√ºedad", "Clima_Laboral", "Desempe√±o", "Prob_Abandono"]
        df_cluster = df_sim[clustering_features].dropna()

        pca = PCA(n_components=2)
        pca_result = pca.fit_transform(df_cluster)

        df_cluster["PCA1"] = pca_result[:, 0]
        df_cluster["PCA2"] = pca_result[:, 1]
        df_cluster["Cluster"] = df_sim["Perfil_Empleado"].values[:len(df_cluster)]

        plt.figure(figsize=(8,6))
        sns.scatterplot(data=df_cluster, x="PCA1", y="PCA2", hue="Cluster", palette="tab10")
        plt.title("Visualizaci√≥n de Perfiles de Empleados (PCA + Clustering)")
        plt.tight_layout()
        plt.savefig("temp_img/clustering_pca.png")
        plt.close()
    except Exception as e:
        print("Error al generar PCA:", e)

# --- Generar PDF solo con las gr√°ficas ---
pdf = FPDF()
pdf.add_page()
pdf.set_font("Arial", "B", 16)
pdf.cell(0, 10, "Informe Visual - Gr√°ficas Clave del An√°lisis", ln=True)

def add_graph(title, path):
    pdf.set_font("Arial", "B", 12)
    pdf.ln(5)
    pdf.cell(0, 10, title, ln=True)
    if os.path.exists(path):
        pdf.image(path, w=180)
    else:
        pdf.set_font("Arial", "", 11)
        pdf.multi_cell(0, 10, f"{title} - No disponible")

# Insertar todas las gr√°ficas
add_graph("Distribuci√≥n del Riesgo de Abandono", "temp_img/graf_riesgo.png")
add_graph("Clima Laboral Medio por Departamento", "temp_img/graf_clima.png")
add_graph("Comparativa de Pol√≠ticas Estrat√©gicas", "temp_img/graf_politicas.png")
add_graph("Promedio de Abandono por Departamento", "temp_img/graf_abandono_departamento.png")
add_graph("Visualizaci√≥n de Perfiles de Empleados (PCA + Clustering)", "temp_img/clustering_pca.png")

# Guardar y descargar PDF final
pdf.output("Informe_IA_RRHH_SOLO_GRAFICAS.pdf")
files.download("Informe_IA_RRHH_SOLO_GRAFICAS.pdf")

# üìÑ Generar informe completo en TXT (explicativo, detallado, con recomendaciones)import osfrom datetime import datetimefecha_actual = datetime.today().strftime('%Y%m%d')nombre_archivo_txt = f"Informe_IA_RRHH_COMPLETO_TXT_{fecha_actual}.txt"lineas_txt = []lineas_txt.append("INFORME COMPLETO DE RECURSOS HUMANOS BASADO EN IA\n")lineas_txt.append("Herramienta creada por Antonio Wilkinson\n")lineas_txt.append(f"Fecha de generaci√≥n: {datetime.today().strftime('%d/%m/%Y')}\n")lineas_txt.append("="*80 + "\n")# Promedio general de riesgoriesgo_medio = df_sim["Prob_Abandono"].mean()lineas_txt.append(f"Probabilidad media de abandono en la empresa: {riesgo_medio:.2%}\n\n")# Riesgo medio por departamentolineas_txt.append(">> Riesgo medio de abandono por departamento:\n")riesgo_por_dep = df_sim.groupby("Departamento")["Prob_Abandono"].mean()for d, v in riesgo_por_dep.items():    lineas_txt.append(f"  - {d}: {v:.2%}\n")lineas_txt.append("\n")# Segmentaci√≥n de perfiles si existeif "Perfil_Empleado" in df_sim.columns:    lineas_txt.append(">> Segmentaci√≥n de perfiles basada en clustering:\n")    for perfil in sorted(df_sim["Perfil_Empleado"].unique()):        grupo = df_sim[df_sim["Perfil_Empleado"] == perfil]        edad_media = grupo["Edad"].mean()        antiguedad_media = grupo["Antig√ºedad"].mean()        clima_medio = grupo["Clima_Laboral"].mean()        desempe√±o_medio = grupo["Desempe√±o"].mean()        riesgo_medio_perfil = grupo["Prob_Abandono"].mean()        lineas_txt.append(f"Perfil {perfil}: Edad media: {edad_media:.1f}, Antig√ºedad media: {antiguedad_media:.1f}, Clima: {clima_medio:.1f}, Desempe√±o: {desempe√±o_medio:.1f}, Riesgo medio: {riesgo_medio_perfil:.2%}\n")    lineas_txt.append("\n")# Detalles por empleadolineas_txt.append(">> Recomendaciones personalizadas por empleado:\n")for idx, row in df_sim.iterrows():    lineas_txt.append(f"Empleado 10:\n")    lineas_txt.append(f"Edad: {row['Edad']} a√±os | Antig√ºedad: {row['Antig√ºedad']} a√±os\n")    lineas_txt.append(f"Departamento: {row['Departamento']} | Clima Laboral: {row['Clima_Laboral']} / 5 | Desempe√±o: {row['Desempe√±o']} / 5\n")    lineas_txt.append(f"Tipo de Contrato: {row['Tipo_Contrato']} | Horas Extra: {row['Horas_Extra']}h\n")    lineas_txt.append(f"Bajas en el √∫ltimo a√±o: {row['Bajas_√öltimo_A√±o']} | Promociones en 2 a√±os: {row['Promociones_2_A√±os']}\n")    lineas_txt.append(f"Probabilidad estimada de abandono: {row['Prob_Abandono']:.2%}\n")    recomendacion = row.get("Recomendaci√≥n", "No disponible")    lineas_txt.append(f"Recomendaci√≥n: {recomendacion}\n")    lineas_txt.append("-"*60 + "\n")# Guardar el archivowith open(nombre_archivo_txt, "w", encoding="utf-8") as f:    f.writelines(lineas_txt)print(f"‚úÖ Informe guardado como: {nombre_archivo_txt}")

# üß† Aplicar KMeans clustering
from sklearn.cluster import KMeans
kmeans = KMeans(n_clusters=4, random_state=42)
clusters = kmeans.fit_predict(X_cluster_scaled)
df_sim["Perfil_Empleado"] = clusters

#  Visualizaci√≥n con reducci√≥n de dimensiones
from sklearn.decomposition import PCA
X_pca = PCA(n_components=2).fit_transform(X_cluster_scaled)
df_pca = pd.DataFrame(X_pca, columns=["PCA1", "PCA2"])
df_pca["Perfil"] = df_sim["Perfil_Empleado"]

plt.figure(figsize=(8,6))
sns.scatterplot(data=df_pca, x="PCA1", y="PCA2", hue="Perfil", palette="Set2")
plt.title("Visualizaci√≥n de Perfiles de Empleados (PCA + Clustering)")
plt.grid(True)
plt.show()

from sklearn.decomposition import PCA

# Verificamos que se pueda hacer PCA
if 'Perfil_Empleado' in df_sim.columns:
    try:
        features = df_sim.select_dtypes(include='number').drop(columns=['Prob_Abandono'], errors='ignore')
        features = features.dropna()
        pca = PCA(n_components=2)
        components = pca.fit_transform(features)

        plt.figure(figsize=(8,6))
        sns.scatterplot(x=components[:,0], y=components[:,1], hue=df_sim.loc[features.index, 'Perfil_Empleado'], palette='Set2')
        plt.title("Visualizaci√≥n de Perfiles de Empleados (PCA + Clustering)")
        plt.xlabel("Componente Principal 1")
        plt.ylabel("Componente Principal 2")
        plt.legend(title='Perfil')
        plt.tight_layout()
        plt.savefig("temp_img/pca_clustering.png")
        plt.close()
    except Exception as e:
        print("‚ùå Error generando PCA clustering:", e)

# Assuming previous cells for data loading, preprocessing, and model training have run successfully.
# df and model, scaler, etc., should be available.

# Generar predicciones de probabilidad en el dataset original
# Aplicar el mismo escalador usado en el entrenamiento a los datos originales
# This step is crucial as it creates 'df_sim' and 'Prob_Abandono'
X_original_scaled = scaler.transform(X) # Reutilizar el escalador entrenado

# Predecir las probabilidades de abandono (clase 1)
prob_abandono_original = model.predict_proba(X_original_scaled)[:, 1]

# Crear una copia del DataFrame original y a√±adir la columna de probabilidad
df_sim = df.copy()
df_sim["Prob_Abandono"] = prob_abandono_original

# --- BEGIN: Add logic to generate 'Recomendaci√≥n' column ---
# This is a placeholder logic. You should replace this with the actual
# logic used in your notebook to generate the recommendations.
# Example: Simple recommendation based on probability score
def generate_recommendation(prob):
    if prob >= 0.6:
        return "üìå Alto riesgo: Considerar programas de retenci√≥n y revisi√≥n salarial/condiciones."
    elif prob >= 0.3:
        return "‚ö†Ô∏è Medio riesgo: Monitorear, ofrecer formaci√≥n o mejoras en clima laboral."
    else:
        return "‚úÖ Bajo riesgo: Mantener condiciones, enfoque en desarrollo profesional."

df_sim['Recomendaci√≥n'] = df_sim['Prob_Abandono'].apply(generate_recommendation)
# --- END: Add logic to generate 'Recomendaci√≥n' column ---

# --- Move this cell block UPWARDS in the notebook ---
# This cell should be AFTER you have df_sim available, but BEFORE
# any section (like the simulation or strategic report) tries to use 'pdf'.

!pip install fpdf matplotlib # Ensure fpdf is installed

# üìÑ Generar informe PDF para descargar
from fpdf import FPDF
from google.colab import files
import os
import shutil
from datetime import datetime
import matplotlib.pyplot as plt
import seaborn as sns
import re # Importar la librer√≠a re para expresiones regulares

class PDFReport(FPDF):
    def header(self):
        self.set_font("Arial", "B", 14)
        self.cell(0, 10, "Informe Estrat√©gico de Plantilla - IA RRHH", ln=True, align="C")
        self.set_font("Arial", "", 10)
        self.cell(0, 10, "Generado autom√°ticamente a partir del an√°lisis de empleados", ln=True, align="C")
        self.ln(5)

    def add_employee_section(self, row):
        self.set_font("Arial", "B", 11)
        self.cell(0, 10, f"Departamento: {row['Departamento']}", ln=True)
        self.set_font("Arial", "", 10)

        # Eliminar emojis de la recomendaci√≥n usando una expresi√≥n regular
        # Esto asegura que solo se incluyan caracteres que fpdf pueda manejar.
        recommendation_text = row.get('Recomendaci√≥n', 'No disponible')
        recommendation_text = re.sub(r'[^\x00-\x7F]+', '', recommendation_text) # Elimina caracteres no ASCII

        self.multi_cell(0, 8, f"""Edad: {row['Edad']} a√±os
Antig√ºedad: {row['Antig√ºedad']} a√±os
Desempe√±o: {row['Desempe√±o']} / 5
Clima Laboral: {row['Clima_Laboral']} / 5
Horas Extra: {row['Horas_Extra']}h
Tipo de Contrato: {row['Tipo_Contrato']}
Bajas √öltimo A√±o: {row['Bajas_√öltimo_A√±o']}
Promociones en 2 A√±os: {row['Promociones_2_A√±os']}
Probabilidad de Abandono: {round(row['Prob_Abandono']*100)}%
Recomendaci√≥n: {recommendation_text}
""")
        self.ln(3)

# Create and save PDF object - THIS LINE MUST BE RUN BEFORE using 'pdf'
pdf = PDFReport()
pdf.set_auto_page_break(auto=True, margin=15)
# Add the first page or cover page here if desired before other sections
# pdf.add_page() # Optional: Add a cover page if not done in the main report generation block below

# --- END OF CELL BLOCK TO BE MOVED UP ---


# --- SECCI√ìN 3: Simulaci√≥n de Pol√≠ticas Estrat√©gicas (Corregida y Ampliada) ---
# This cell should now run AFTER the cell above that defines PDFReport and creates 'pdf'
pdf.add_page() # This line should now work
pdf.set_font("Arial", 'B', 14)
pdf.cell(0, 10, "3. Simulaci√≥n de Pol√≠ticas Estrat√©gicas", ln=True)
pdf.set_font("Arial", size=12)
pdf.multi_cell(0, 10, """
Se han simulado tres posibles pol√≠ticas para reducir el riesgo de abandono:

1. Mejora de la formaci√≥n: aumenta la satisfacci√≥n y motivaci√≥n.
2. Mejora salarial: mejora el compromiso y percepci√≥n de valor.
3. Combinaci√≥n de ambas: busca un impacto sin√©rgico.

A continuaci√≥n se presentan los resultados agregados y la distribuci√≥n del riesgo por cada pol√≠tica simulada.
""")

# ‚öôÔ∏è Crear variables de simulaci√≥n si no est√°n creadas
# This block requires df_sim to be defined, which is done in the cell above
if 'escenarios' not in globals():
    form = df_sim.copy()
    sal = df_sim.copy()
    both = df_sim.copy()

    form["Prob_Abandono"] *= 0.9  # Reducci√≥n del 10%
    sal["Prob_Abandono"] *= 0.85 # Reducci√≥n del 15%
    both["Prob_Abandono"] *= 0.8 # Reducci√≥n del 20%

    escenarios = {
        'Original': df_sim["Prob_Abandono"].mean(),
        'Formaci√≥n': form["Prob_Abandono"].mean(),
        'Salario': sal["Prob_Abandono"].mean(),
        'Combinada': both["Prob_Abandono"].mean()
    }

# üìä Gr√°fica 1: Comparaci√≥n del riesgo medio
plt.figure(figsize=(6,4))
sns.barplot(x=list(escenarios.keys()), y=list(escenarios.values()), palette="Set2")
plt.title("Comparativa de riesgo medio por pol√≠tica")
plt.ylabel("Probabilidad media de abandono")
plt.tight_layout()
graf1_path = "temp_img/simulacion_barra.png"
plt.savefig(graf1_path)
plt.close()
pdf.image(graf1_path, w=180)
pdf.multi_cell(0, 10, """
Esta gr√°fica muestra la probabilidad media de abandono tras aplicar cada pol√≠tica.
- Eje X: tipo de pol√≠tica.
- Eje Y: riesgo medio estimado de abandono.

Observamos que la pol√≠tica combinada es la m√°s efectiva, seguida por mejoras salariales y de formaci√≥n.
""")

# üìà Gr√°fica 2: Distribuci√≥n del riesgo por pol√≠tica
try:
    df_escenarios = pd.DataFrame({
        "Formaci√≥n": form["Prob_Abandono"],
        "Salario": sal["Prob_Abandono"],
        "Combinada": both["Prob_Abandono"]
    })

    plt.figure(figsize=(8,5))
    sns.kdeplot(data=df_escenarios, fill=True)
    plt.title("Distribuci√≥n del riesgo por pol√≠tica aplicada")
    plt.xlabel("Probabilidad de abandono")
    plt.ylabel("Densidad de empleados")
    plt.tight_layout()
    graf2_path = "temp_img/simulacion_distribucion.png"
    plt.savefig(graf2_path)
    plt.close()
    pdf.image(graf2_path, w=180)
    pdf.multi_cell(0, 10, """
Esta gr√°fica compara c√≥mo se distribuye el riesgo entre los empleados bajo cada pol√≠tica.
- Eje X: riesgo de abandono individual.
- Eje Y: densidad o frecuencia de empleados con ese riesgo.

La pol√≠tica combinada desplaza m√°s empleados hacia niveles bajos de riesgo, demostrando mayor efectividad.
""")
except Exception as e: # Catch specific exceptions or print the error for debugging
    print(f"Error generating distribution plot: {e}")
    pdf.multi_cell(0, 10, "No se pudo generar la distribuci√≥n por pol√≠ticas debido a que no se encontraron los datos simulados o hubo un error de graficaci√≥n.")


# ‚úÖ Recomendaci√≥n estrat√©gica
pdf.set_font("Arial", 'B', 12)
pdf.cell(0, 10, "Recomendaci√≥n:", ln=True)
pdf.set_font("Arial", size=12)
pdf.multi_cell(0, 10, """
Se recomienda priorizar la pol√≠tica combinada, ya que muestra la mayor reducci√≥n promedio del riesgo de abandono.

Para optimizar costes:
- Aplicar formaci√≥n a perfiles con baja antig√ºedad o desempe√±o d√©bil.
- Otorgar mejoras salariales a perfiles clave con alto riesgo o buen desempe√±o.
- Utilizar la segmentaci√≥n por cl√∫ster para personalizar las pol√≠ticas por grupo de empleados.

Una aplicaci√≥n estrat√©gica por perfil maximiza el impacto minimizando el coste.
""")

# Assuming previous cells for data loading, preprocessing, and model training have run successfully.
# df and model, scaler, etc., should be available.

# Generar predicciones de probabilidad en el dataset original
# Aplicar el mismo escalador usado en el entrenamiento a los datos originales
# This step is crucial as it creates 'df_sim' and 'Prob_Abandono'
X_original_scaled = scaler.transform(X) # Reutilizar el escalador entrenado

# Predecir las probabilidades de abandono (clase 1)
prob_abandono_original = model.predict_proba(X_original_scaled)[:, 1]

# Crear una copia del DataFrame original y a√±adir la columna de probabilidad
df_sim = df.copy()
df_sim["Prob_Abandono"] = prob_abandono_original

# --- BEGIN: Add logic to generate 'Recomendaci√≥n' column ---
# This is a placeholder logic. You should replace this with the actual
# logic used in your notebook to generate the recommendations.
# Example: Simple recommendation based on probability score
def generate_recommendation(prob):
    if prob >= 0.6:
        return "üìå Alto riesgo: Considerar programas de retenci√≥n y revisi√≥n salarial/condiciones."
    elif prob >= 0.3:
        return "‚ö†Ô∏è Medio riesgo: Monitorear, ofrecer formaci√≥n o mejoras en clima laboral."
    else:
        return "‚úÖ Bajo riesgo: Mantener condiciones, enfoque en desarrollo profesional."

df_sim['Recomendaci√≥n'] = df_sim['Prob_Abandono'].apply(generate_recommendation)
# --- END: Add logic to generate 'Recomendaci√≥n' column ---

# --- Move this cell block UPWARDS in the notebook ---
# This cell should be AFTER you have df_sim available, but BEFORE
# any section (like the simulation or strategic report) tries to use 'pdf'.

!pip install fpdf matplotlib # Ensure fpdf is installed

# üìÑ Generar informe PDF para descargar
from fpdf import FPDF
from google.colab import files
import os
import shutil
from datetime import datetime
import matplotlib.pyplot as plt
import seaborn as sns
import re # Importar la librer√≠a re para expresiones regulares

class PDFReport(FPDF):
    def header(self):
        self.set_font("Arial", "B", 14)
        self.cell(0, 10, "Informe Estrat√©gico de Plantilla - IA RRHH", ln=True, align="C")
        self.set_font("Arial", "", 10)
        self.cell(0, 10, "Generado autom√°ticamente a partir del an√°lisis de empleados", ln=True, align="C")
        self.ln(5)

    def add_employee_section(self, row):
        self.set_font("Arial", "B", 11)
        self.cell(0, 10, f"Departamento: {row['Departamento']}", ln=True)
        self.set_font("Arial", "", 10)

        # Eliminar emojis de la recomendaci√≥n usando una expresi√≥n regular
        # Esto asegura que solo se incluyan caracteres que fpdf pueda manejar.
        recommendation_text = row.get('Recomendaci√≥n', 'No disponible')
        recommendation_text = re.sub(r'[^\x00-\x7F]+', '', recommendation_text) # Elimina caracteres no ASCII

        self.multi_cell(0, 8, f"""Edad: {row['Edad']} a√±os
Antig√ºedad: {row['Antig√ºedad']} a√±os
Desempe√±o: {row['Desempe√±o']} / 5
Clima Laboral: {row['Clima_Laboral']} / 5
Horas Extra: {row['Horas_Extra']}h
Tipo de Contrato: {row['Tipo_Contrato']}
Bajas √öltimo A√±o: {row['Bajas_√öltimo_A√±o']}
Promociones en 2 A√±os: {row['Promociones_2_A√±os']}
Probabilidad de Abandono: {round(row['Prob_Abandono']*100)}%
Recomendaci√≥n: {recommendation_text}
""")
        self.ln(3)

# Create and save PDF object - THIS LINE MUST BE RUN BEFORE using 'pdf'
pdf = PDFReport()
pdf.set_auto_page_break(auto=True, margin=15)
# Add the first page or cover page here if desired before other sections
# pdf.add_page() # Optional: Add a cover page if not done in the main report generation block below

# --- END OF CELL BLOCK TO BE MOVED UP ---


# --- SECCI√ìN 3: Simulaci√≥n de Pol√≠ticas Estrat√©gicas (Corregida y Ampliada) ---
# This cell should now run AFTER the cell above that defines PDFReport and creates 'pdf'

# Add this line to ensure the directory exists before saving plots
os.makedirs("temp_img", exist_ok=True)

pdf.add_page() # This line should now work
pdf.set_font("Arial", 'B', 14)
pdf.cell(0, 10, "3. Simulaci√≥n de Pol√≠ticas Estrat√©gicas", ln=True)
pdf.set_font("Arial", size=12)
pdf.multi_cell(0, 10, """
Se han simulado tres posibles pol√≠ticas para reducir el riesgo de abandono:

1. Mejora de la formaci√≥n: aumenta la satisfacci√≥n y motivaci√≥n.
2. Mejora salarial: mejora el compromiso y percepci√≥n de valor.
3. Combinaci√≥n de ambas: busca un impacto sin√©rgico.

A continuaci√≥n se presentan los resultados agregados y la distribuci√≥n del riesgo por cada pol√≠tica simulada.
""")

# ‚öôÔ∏è Crear variables de simulaci√≥n si no est√°n creadas
# This block requires df_sim to be defined, which is done in the cell above
if 'escenarios' not in globals():
    form = df_sim.copy()
    sal = df_sim.copy()
    both = df_sim.copy()

    form["Prob_Abandono"] *= 0.9  # Reducci√≥n del 10%
    sal["Prob_Abandono"] *= 0.85 # Reducci√≥n del 15%
    both["Prob_Abandono"] *= 0.8 # Reducci√≥n del 20%

    escenarios = {
        'Original': df_sim["Prob_Abandono"].mean(),
        'Formaci√≥n': form["Prob_Abandono"].mean(),
        'Salario': sal["Prob_Abandono"].mean(),
        'Combinada': both["Prob_Abandono"].mean()
    }

# üìä Gr√°fica 1: Comparaci√≥n del riesgo medio
plt.figure(figsize=(6,4))
sns.barplot(x=list(escenarios.keys()), y=list(escenarios.values()), palette="Set2")
plt.title("Comparativa de riesgo medio por pol√≠tica")
plt.ylabel("Probabilidad media de abandono")
plt.tight_layout()
graf1_path = "temp_img/simulacion_barra.png"
plt.savefig(graf1_path)
plt.close()
pdf.image(graf1_path, w=180)
pdf.multi_cell(0, 10, """
Esta gr√°fica muestra la probabilidad media de abandono tras aplicar cada pol√≠tica.
- Eje X: tipo de pol√≠tica.
- Eje Y: riesgo medio estimado de abandono.

Observamos que la pol√≠tica combinada es la m√°s efectiva, seguida por mejoras salariales y de formaci√≥n.
""")

# üìà Gr√°fica 2: Distribuci√≥n del riesgo por pol√≠tica
try:
    df_escenarios = pd.DataFrame({
        "Formaci√≥n": form["Prob_Abandono"],
        "Salario": sal["Prob_Abandono"],
        "Combinada": both["Prob_Abandono"]
    })

    plt.figure(figsize=(8,5))
    sns.kdeplot(data=df_escenarios, fill=True)
    plt.title("Distribuci√≥n del riesgo por pol√≠tica aplicada")
    plt.xlabel("Probabilidad de abandono")
    plt.ylabel("Densidad de empleados")
    plt.tight_layout()
    graf2_path = "temp_img/simulacion_distribucion.png"
    plt.savefig(graf2_path)
    plt.close()
    pdf.image(graf2_path, w=180)
    pdf.multi_cell(0, 10, """
Esta gr√°fica compara c√≥mo se distribuye el riesgo entre los empleados bajo cada pol√≠tica.
- Eje X: riesgo de abandono individual.
- Eje Y: densidad o frecuencia de empleados con ese riesgo.

La pol√≠tica combinada desplaza m√°s empleados hacia niveles bajos de riesgo, demostrando mayor efectividad.
""")
except Exception as e: # Catch specific exceptions or print the error for debugging
    print(f"Error generating distribution plot: {e}")
    pdf.multi_cell(0, 10, "No se pudo generar la distribuci√≥n por pol√≠ticas debido a que no se encontraron los datos simulados o hubo un error de graficaci√≥n.")


# ‚úÖ Recomendaci√≥n estrat√©gica
pdf.set_font("Arial", 'B', 12)
pdf.cell(0, 10, "Recomendaci√≥n:", ln=True)
pdf.set_font("Arial", size=12)
pdf.multi_cell(0, 10, """
Se recomienda priorizar la pol√≠tica combinada, ya que muestra la mayor reducci√≥n promedio del riesgo de abandono.

Para optimizar costes:
- Aplicar formaci√≥n a perfiles con baja antig√ºedad o desempe√±o d√©bil.
- Otorgar mejoras salariales a perfiles clave con alto riesgo o buen desempe√±o.
- Utilizar la segmentaci√≥n por cl√∫ster para personalizar las pol√≠ticas por grupo de empleados.

Una aplicaci√≥n estrat√©gica por perfil maximiza el impacto minimizando el coste.
""")

# üìà Distribuci√≥n de probabilidad de abandono
plt.figure(figsize=(8,5))
sns.histplot(df_sim['Prob_Abandono'], bins=10, kde=True, color='skyblue')
plt.title('Distribuci√≥n de Probabilidad de Abandono')
plt.xlabel('Probabilidad')
plt.ylabel('N√∫mero de empleados')
plt.grid(True)
plt.show()

# üßÆ Promedio de abandono por departamento
dept_avg = df_sim.groupby('Departamento')['Prob_Abandono'].mean().sort_values()
plt.figure(figsize=(10,6))
dept_avg.plot(kind='barh', color='salmon')
plt.title('Promedio de riesgo de abandono por departamento')
plt.xlabel('Riesgo promedio')
plt.grid(axis='x')
plt.show()

if 'Departamento' in df_sim.columns and 'Prob_Abandono' in df_sim.columns:
    try:
        abandono_dep = df_sim.groupby("Departamento")["Prob_Abandono"].mean().sort_values()
        plt.figure(figsize=(8,5))
        abandono_dep.plot(kind='barh', color='salmon')
        plt.title("Promedio de Abandono por Departamento")
        plt.xlabel("Probabilidad media de abandono")
        plt.ylabel("Departamento")
        plt.tight_layout()
        plt.savefig("temp_img/abandono_departamento.png")
        plt.close()
    except Exception as e:
        print("‚ùå Error generando gr√°fico de abandono por departamento:", e)

# üìÑ Exportar informe como archivo de texto plano (.txt)
txt_path = "Informe_IA_RRHH_RESUMEN_MEJORADO.txt"
with open(txt_path, "w", encoding="utf-8") as f:
    f.write("üìò INFORME DE INTELIGENCIA ARTIFICIAL EN RRHH\n")
    f.write("Generado autom√°ticamente\n\n")

    f.write("üîç 1. Introducci√≥n\n")
    f.write("Este informe presenta un an√°lisis estrat√©gico de los empleados de la empresa utilizando IA.\n")
    f.write("Incluye riesgo de abandono, clima laboral, simulaci√≥n de pol√≠ticas y clustering de perfiles.\n\n")

    f.write("üìä 2. Clima Laboral y Riesgo Global\n")
    if 'df_sim' in globals():
        clima_medio = df_sim["Clima_Laboral"].mean() if "Clima_Laboral" in df_sim.columns else None
        riesgo_medio = df_sim["Prob_Abandono"].mean() if "Prob_Abandono" in df_sim.columns else None
        if clima_medio is not None and riesgo_medio is not None:
            f.write(f"Clima laboral promedio: {round(clima_medio, 2)} / 5\n")
            f.write(f"Probabilidad media de abandono: {round(riesgo_medio*100, 1)}%\n\n")
        else:
            f.write("Datos no disponibles.\n\n")

    f.write("üë• 3. Recomendaciones por Empleado (Top 10)\n")
    top_empleados = df_sim.sort_values("Prob_Abandono", ascending=False).head(10)
    for i, row in top_empleados.iterrows():
        f.write(f"\nEmpleado {i+1}:\n")
        f.write(f"Edad: {row['Edad']} a√±os\n")
        f.write(f"Antig√ºedad: {row['Antig√ºedad']} a√±os\n")
        f.write(f"Departamento: {row['Departamento']}\n")
        f.write(f"Clima Laboral: {row['Clima_Laboral']} / 5\n")
        f.write(f"Probabilidad de abandono: {round(row['Prob_Abandono']*100, 1)}%\n")
        f.write(f"Recomendaci√≥n: {row['Recomendaci√≥n']}\n")

    f.write("\nüìà 4. Simulaci√≥n de Pol√≠ticas Estrat√©gicas\n")
    if 'escenarios' in globals() and escenarios:
        for pol, val in escenarios.items():
            f.write(f"- {pol}: {round(val*100, 1)}% de abandono medio\n")
        f.write("La pol√≠tica combinada es la m√°s efectiva en reducir el riesgo.\n\n")
    else:
        f.write("No se pudieron cargar los resultados de la simulaci√≥n.\n\n")

    f.write("üî¨ 5. Agrupaci√≥n de Perfiles (Clustering)\n")
    if "Perfil_Empleado" in df_sim.columns:
        for c in sorted(df_sim["Perfil_Empleado"].unique()):
            grupo = df_sim[df_sim["Perfil_Empleado"] == c]
            edad_media = grupo["Edad"].mean()
            antiguedad = grupo["Antig√ºedad"].mean()
            clima = grupo["Clima_Laboral"].mean()
            abandono = grupo["Prob_Abandono"].mean()
            f.write(f"\nGrupo {c} ({len(grupo)} empleados):\n")
            f.write(f"Edad media: {round(edad_media,1)} a√±os | Antig√ºedad: {round(antiguedad,1)} a√±os\n")
            f.write(f"Clima laboral medio: {round(clima,1)} / 5\n")
            f.write(f"Probabilidad media de abandono: {round(abandono*100,1)}%\n")
    else:
        f.write("No se encontr√≥ informaci√≥n de clustering.\n")

    f.write("\nüß† 6. Conclusiones y Estrategias Recomendadas\n")
    f.write("- Focalizar formaci√≥n e incentivos en empleados con riesgo alto.\n")
    f.write("- Evaluar clima laboral por departamento para corregir focos problem√°ticos.\n")
    f.write("- Aplicar medidas diferenciadas por grupo de empleados.\n")
    f.write("- Repetir an√°lisis peri√≥dicamente y usar IA como herramienta predictiva.\n")

# Descargar
files.download(txt_path)